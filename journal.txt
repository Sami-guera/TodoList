Lundi matin:
	matinée passée a setup l'environnement Strapi en back et React 
	en front, problème : Strapi ne supporte pas de version de node 
	supérieur à "20" donc j'ai pus m'amuser avec nvm pour downgrade
	mon node
	la doc react/strapi présente ici : https://bit.ly/3RuPsJW
	reste de la matinée passée a regarder aussi la doc de strapi 
	setup la database MySQL "todoList"
	et à s'occuper de ma recherche d'alternance.
		
lundi aprèm:
	j'ai pus faire une connexion/inscription en galérant un peu à 
	trouver le format attendu par Strapi pour recevoir les 		
	inscriptions/connexion + découverte du pannel admin de Strapi.
		
	pour l'instant, il n'y a de style nulle part on s'en occupera 
	une fois toutes les fonctionnalités atteintes, d'ailleurs :
			
	ordre des tâches pour ce soir :
	-push
	-flécher le parcour utilisateur puis lister les fonctionnalités 
	souhaitées
	-développer un max pour être le moins sous pression possible 
	demain 

lundi soir:
	planification de la journée du lendemain a savoir :
	
	parcours user: 
	
	-Choix entre log et reg
	-log/arriver home
	-reg/log/ arriver home


	composition : 
	La home page :
	-navbar (a faire, fait, profil?)
	Composant(on parle des affichages) :

	A faire(liste des to-do(avec un bouton modifier et un bouton fait qui
	change le champ booléen) + form d'ajout de to-do)
	Fait (à supprimer)
	On vas chercher dans la table les todos "a faire"

	Todo card : titre, description radio box "fait" (si cliqué la card le
	remplace par une redio box à faire)
	Bouton de validation (fait un fetch)


mardi matin : 
	-faire la table de todo

	Champ : titre requis
	Champ : description non requise
	Champ : statut faire ou à faire (bool)
	Champ : Timestamp
	
	
	je note ici que les routes sont trouvables 
	dans settings/Roles => permissions (a chaque action comme find, 
	create.. est associé un boutons paramètres qui , display la route)
	
	la table étant crée on passe au form de création de todo, petit 
	problème, on reçoit une error 40"(forbiden) donc il faut se 
	renseigner sur les permissions (effectivement il faut l'autoriser dans 
	les permissions de rôles) 
	
	Récupération de Todo :
	problème, on récupère tout les todos alprs qu'on ne veut que ceux qui 
	sont de nous, ajout d'un champ "author" au todo, et pour lefetch on 
	donne cette addresse "http://localhost:1337/todos?author=${username}"
	je laisse tomber la navbar vus le temps restant, on affichera sur la 
	même page les "faits" et les "à faire" 
	
	11H45:
	
	maintenant qu'on récupère correctement NOS todos reste a faire le CRUD 
	correspondant (case à cocher "finie", supprimer, update) le mieux 
	serait de mapper la liste des todos sur une Card à laquelle on 
	passerait le todo comme "Props" mais je préfère ne pas m'emmeler les
	 pinceaux maintenant donc on vas le faire dans le composant GetTodos 
	 directement.
	 
	donc programme de cet aprèm :
		-Le formulaire de Crud des todos + les 
	         fonctions(et fetch) associées 
		
		-au moins une demi heure de style parce qu'actuellement le site 		 
		 ressemble plus à une chambre d'hopital qu'a un bloc-note
		 
		 
13H20:
	Finalement on vas faire la Card de Todo maintenant (code plus propre)
	on crée les fonctions d'éditions côté "GetTodos" et on les passe comme 
	props (avec le todo) à TodoCard, todocard return un ternaire (selon 
	que l'édition soit en cours où non 
	
	-handleDeleteTodo : fais un fetch avec l'id du todo et la method 
	  		    'delete'
	-handleUpdateTodo : fais un fetch avec id et method 'put'
	
	
14H49: 
	la dernière heure as été consacrée à me reformer sur le passage de 
	données entre composants(principalement sur la fonction d'update qui 
	avait UNE TYPO "todo au lieu de todos"    :( 
	
	je peux enfin creer, éditer et supprimer un todo ! 
	
	

 
